from __future__ import print_function  # For Python 3 compatibility
import string

# Refernce alphabet
alphabet = unicode(string.ascii_letters)

# Encrypted alphabet
key13 = u"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM"

# Translation table
# The table generated by maketrans() does not work with str.translate if
# unicode characters are used. A dictionary had to be made manually.

# Generate translation table
table13 = {ord(item):  key13[i] for i, item in enumerate(alphabet)}

# Encryption via str.translate()


def rot13(text):
    """ Encryption via the translate method for strings. """
    return text.translate(table13)

if __name__ == '__main__':

    # Example text
    plain_text = u"""For instance, on the planet Earth, man had always assumed that
    the was more intelligent than dolphins because he had achieved so much -
    the wheel, New York, wars and so on - whilst all the dolphins had ever done
    was muck about in the water having a good time. But conversely, the
    dolphins had always believed that they were far more intelligent than man -
    for precisely the same reasons."""

    print(plain_text, end="\n\n")

    encrypted_text = rot13(plain_text)
    print(encrypted_text, end="\n\n")

    # Test case 1: Does it properly encrypt the alphabet?
    assert rot13(alphabet) == key13

    # Test case 2: Does it ignore punctuation adn white space?
    punc = unicode(string.punctuation)
    assert rot13(punc) == punc

    print(u"All tests passed.")
